import{a as f}from"./chunk-ATCUZYZW.js";import{c as v}from"./chunk-D2SEPQ6Z.js";import{T as c,Z as u,a as n,b as o,ua as d}from"./chunk-FGD53Q7F.js";var p=class s{stateService=u(v);chats=d(null);updateChats(t){this.chats.set(t)}getUnreadCount(t){if(console.log("Getting unread count for chat:",t),!t)return 0;let e=this.stateService.user()?.id;return e?t.participant1Id===Number(e)?t.unreadCount1||0:t.participant2Id===Number(e)&&t.unreadCount2||0:0}markChatAsRead(t){let a=this.chats()?.map(i=>{if(i.id===t){let r=this.stateService.user()?.id;if(!r)return i;if(i.participant1Id===Number(r))return o(n({},i),{unreadCount1:0});if(i.participant2Id===Number(r))return o(n({},i),{unreadCount2:0})}return i})||[];this.chats.set(a)}getChatById(t){return this.chats()?.find(e=>e.id===t)}getChatByParticipantId(t){return this.chats()?.find(e=>e.participant1Id.toString()===t||e.participant2Id.toString()===t)}updateChatLastMessage(t,e){let i=this.chats()?.map(r=>r.id===t?o(n({},r),{lastMessageAt:e}):r)||[];this.chats.set(i)}updateUserOnlineStatus(t,e){let i=this.chats()?.map(r=>{let h=n({},r);return r.participant1&&r.participant1.id===t&&(h=o(n({},h),{participant1:o(n({},r.participant1),{isOnline:e})})),r.participant2&&r.participant2.id===t&&(h=o(n({},h),{participant2:o(n({},r.participant2),{isOnline:e})})),h})||[];this.chats.set(i)}clearChats(){this.chats.set([])}static \u0275fac=function(e){return new(e||s)};static \u0275prov=c({token:s,factory:s.\u0275fac,providedIn:"root"})};var l=class s{interlocutor=d(null);changeOnlineStatus(t,e){let a=this.interlocutor();a&&a.id===t&&this.interlocutor.set(o(n({},a),{isOnline:e}))}static \u0275fac=function(e){return new(e||s)};static \u0275prov=c({token:s,factory:s.\u0275fac,providedIn:"root"})};var b=class s{interlocutorService=u(l);socket=u(f);chatStateService=u(p);isChatsLoading=d(!1);constructor(){this.subscribeToEvents()}subscribeToEvents(){this.onUserChats().subscribe(t=>{this.chatStateService.updateChats(t),this.isChatsLoading.set(!1)}),this.onUserOnlineStatus().subscribe(t=>{this.chatStateService.updateUserOnlineStatus(t.userId,t.isOnline),this.interlocutorService.changeOnlineStatus(t.userId,t.isOnline)}),this.onError().subscribe(t=>{console.error("Socket connection error",t)}),this.onDisconnect().subscribe(()=>{this.isChatsLoading.set(!1),this.chatStateService.chats.set(null)})}isConnected(){return this.socket.ioSocket.connected}connect(t){this.isConnected()||(t&&(this.socket.ioSocket.auth={token:t}),this.socket.connect())}disconnect(){this.socket.disconnect()}sendMessage(t){this.socket.emit("sendMessage",t)}onReceiveMessage(){return this.socket.fromEvent("receiveMessage")}onUserOnlineStatus(){return this.socket.fromEvent("userOnlineStatus")}joinChat(t,e){return this.socket.emit("joinChat",{participant1Id:t,participant2Id:e}),this.socket.fromEvent("joinChatResponse")}leaveChat(t){this.socket.emit("leaveChat",{chatId:t})}markMessageAsRead(t){this.socket.emit("markMessageAsRead",{chatId:t})}sendTypingIndicator(t,e){this.socket.emit("typing",{chatId:t,isTyping:e})}onUserTyping(){return this.socket.fromEvent("userTyping")}onUserChats(){return this.socket.fromEvent("userChats")}getUserChats(){this.socket.emit("getUserChats")}onPreviousMessages(){return this.socket.fromEvent("previousMessages")}onConnect(){return this.socket.fromEvent("connect")}onDisconnect(){return this.socket.fromEvent("disconnect")}onError(){return this.socket.fromEvent("connect_error")}static \u0275fac=function(e){return new(e||s)};static \u0275prov=c({token:s,factory:s.\u0275fac,providedIn:"root"})};export{p as a,l as b,b as c};
