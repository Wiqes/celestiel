import{a as j,d as A}from"./chunk-VAZBEXZU.js";import{f as I}from"./chunk-K5BU6CYA.js";import{a as y,d as D}from"./chunk-I2YPUCXL.js";import{C as w,Ka as h,w as x}from"./chunk-ZXNNLAB3.js";import{A as d,D as v,E as m,M as k,O as S,R as s,X as i,h as p,l as u,p as f,tc as b,wa as T,z as g}from"./chunk-QP7WRVZV.js";var c=class r{platformId=i(T);getFingerprint(){if(!x(this.platformId))return btoa("server-side-fallback");let t=this.getPlatform(),e=[navigator.userAgent,navigator.language,screen.width+"x"+screen.height,new Date().getTimezoneOffset(),t].join("|");return btoa(e)}getPlatform(){if("userAgentData"in navigator){let e=navigator.userAgentData;if(e?.platform)return e.platform}let t=navigator.userAgent.toLowerCase();return t.includes("windows")?"Windows":t.includes("mac")?"macOS":t.includes("linux")?"Linux":t.includes("android")?"Android":t.includes("iphone")||t.includes("ipad")?"iOS":"Unknown"}static \u0275fac=function(e){return new(e||r)};static \u0275prov=s({token:r,factory:r.\u0275fac,providedIn:"root"})};var o=class extends Error{};o.prototype.name="InvalidTokenError";function L(r){return decodeURIComponent(atob(r).replace(/(.)/g,(t,e)=>{let n=e.charCodeAt(0).toString(16).toUpperCase();return n.length<2&&(n="0"+n),"%"+n}))}function C(r){let t=r.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw new Error("base64 string is not of the correct length")}try{return L(t)}catch{return atob(t)}}function R(r,t){if(typeof r!="string")throw new o("Invalid token specified: must be a string");t||(t={});let e=t.header===!0?0:1,n=r.split(".")[e];if(typeof n!="string")throw new o(`Invalid token specified: missing part #${e+1}`);let a;try{a=C(n)}catch(l){throw new o(`Invalid token specified: invalid base64 for part #${e+1} (${l.message})`)}try{return JSON.parse(a)}catch(l){throw new o(`Invalid token specified: invalid json for part #${e+1} (${l.message})`)}}var E=class r{router=i(I);stateService=i(D);chatStateService=i(j);authTokenStateService=i(y);chatService=i(A);fingerprintService=i(c);http=i(w);token=b(()=>this.authTokenStateService.token());isRefreshing=new u(!1);refreshTokenSubject=new u(null);logout(){this.stateService.isDataLoading.set(!0);let t=this.token(),e=t?{headers:{Authorization:`Bearer ${t}`}}:{};this.http.post(`${h.API_URL}/auth/logout`,{},e).subscribe({next:()=>{this.isRefreshing.next(!1),this.refreshTokenSubject.next(null),this.moveToLogin()},error:()=>{this.moveToLogin()}})}moveToLogin(){this.authTokenStateService.token.set(null),this.stateService.user.set(null),this.stateService.tokenProfile.set(null),this.chatStateService.chats.set(null),this.router.navigateByUrl("/",{replaceUrl:!0}).finally(()=>{this.stateService.isDataLoading.set(!1)})}getTokenExpiration(){let t=this.token();if(!t)return null;try{return R(t).exp||null}catch(e){return console.error("Error decoding token:",e),null}}getTokenExpirationInfo(){let t=this.getTokenExpiration();if(!t)return{expired:!0,expiresAt:null,timeUntilExpiry:null};let e=Math.floor(Date.now()/1e3),n=new Date(t*1e3),a=t-e;return{expired:e>=t,expiresAt:n,timeUntilExpiry:a}}isTokenExpiringSoon(t=60){let e=this.getTokenExpiration();return e?Math.floor(Date.now()/1e3)+t>=e:!0}getFingerprint(){return this.fingerprintService.getFingerprint()}refreshToken(){if(this.isRefreshing.value)return this.refreshTokenSubject.pipe(g(e=>e!==null),v(1));this.authTokenStateService.isRefreshing.set(!0),this.isRefreshing.next(!0),this.refreshTokenSubject.next(null);let t=this.getFingerprint();return this.http.post(`${h.API_URL}/auth/refresh`,{fingerprint:t},{withCredentials:!0}).pipe(S(e=>{this.onRefreshSuccess(e),this.refreshTokenSubject.next(e.access_token)}),k(e=>new p(n=>{n.next(e.access_token),n.complete()})),d(e=>(this.refreshTokenSubject.next(null),this.moveToLogin(),f(()=>e))),m(()=>{this.isRefreshing.next(!1)}))}onRefreshSuccess(t){let e=t?.access_token||null;e&&(this.authTokenStateService.token.set(e),this.chatService.isUserAuthenticated()||(console.log("Reconnecting chat service after token refresh"),this.chatService.disconnect(),this.chatService.connect(e)),this.authTokenStateService.isRefreshing.set(!1))}static \u0275fac=function(e){return new(e||r)};static \u0275prov=s({token:r,factory:r.\u0275fac,providedIn:"root"})};export{c as a,R as b,E as c};
